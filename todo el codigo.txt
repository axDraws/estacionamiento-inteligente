====================================
==========estructura================
====================================
.estacionamiento
├── app.py
├── arduino
│   └── arduino.ino
├── estacionamiento.db
├── static
│   └── styles.css
└── templates
    ├── admin.html
    ├── login.html
    └── visitante.html
====================================
============app.py==================
====================================
from flask import Flask, render_template, request, redirect, url_for, session, flash
import sqlite3
from datetime import datetime
import serial
import time

app = Flask(__name__)
app.secret_key = 'clave_secreta_segura' # ¡Cambia esto por una clave más robusta en producción!
DATABASE = 'estacionamiento.db'

# Configuración del puerto serial de Arduino
# ¡IMPORTANTE! Hemos confirmado que tu Arduino está en '/dev/ttyUSB0' en EndeavourOS.
# Asegúrate de que la velocidad de baudios (9600) coincida con la de tu Arduino.
arduino_serial = None
try:
    # Para Linux/macOS, usa el puerto identificado (ej. '/dev/ttyUSB0')
    arduino_serial = serial.Serial('/dev/ttyUSB0', 9600, timeout=1)
    time.sleep(2) # Espera a que la conexión serial se establezca
    print("Conexión serial con Arduino establecida en /dev/ttyUSB0.")
except serial.SerialException as e:
    arduino_serial = None
    print(f"No se pudo conectar con Arduino en /dev/ttyUSB0: {e}. Las funciones de barrera no estarán disponibles.")
except Exception as e:
    arduino_serial = None
    print(f"Error inesperado al intentar conectar con Arduino: {e}.")

# Función para enviar comandos a Arduino
def send_command_to_arduino(command):
    if arduino_serial:
        try:
            arduino_serial.write(command.encode('utf-8')) # Codificar el comando a bytes
            print(f"Comando enviado a Arduino: {command}")
        except serial.SerialTimeoutException:
            print("Tiempo de espera agotado al enviar comando a Arduino.")
        except Exception as e:
            print(f"Error al enviar comando a Arduino: {e}")
    else:
        print("Arduino no conectado. No se puede enviar comando.")

# Función para conectar con SQLite
def get_db():
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn

@app.route('/')
def login():
    return render_template('login.html')

@app.route('/login_admin', methods=['POST'])
def login_admin():
    usuario = request.form['usuario']
    password = request.form['password']
    conn = get_db()
    admin = conn.execute('SELECT * FROM administradores WHERE usuario = ? AND password = ?', (usuario, password)).fetchone()
    conn.close()
    if admin:
        session['admin'] = admin['nombre']
        return redirect(url_for('admin'))
    flash(f'Usuario o contraseña incorrectos.', 'error')
    return redirect(url_for('login'))

@app.route('/visitante')
def visitante():
    # La lista de visitantes pendientes ya no es necesaria aquí para el registro de salida manual
    return render_template('visitante.html')

@app.route('/admin')
def admin():
    if 'admin' not in session:
        flash('Debes iniciar sesión como administrador para acceder.', 'warning')
        return redirect(url_for('login'))
    conn = get_db()
    residentes = conn.execute('SELECT * FROM residentes').fetchall()
    visitantes = conn.execute('SELECT * FROM visitantes').fetchall()
    historial = conn.execute('SELECT * FROM historial ORDER BY fecha_hora_entrada DESC').fetchall() # Ordenar historial
    conn.close()
    return render_template('admin.html', residentes=residentes, visitantes=visitantes, historial=historial)

@app.route('/registro_visitante', methods=['POST'])
def registro_visitante():
    data = request.form
    entrada = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    conn = get_db()
    c = conn.cursor()
    c.execute('''
        INSERT INTO visitantes (nombre, apellidos, telefono, modelo_carro, color_carro, placas, residente_uid, fecha_hora_entrada, fecha_hora_salida)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, NULL) # fecha_hora_salida inicialmente NULL
    ''', (data['nombre'], data['apellidos'], data['telefono'], data['modelo_carro'], data['color_carro'], data['placas'], data['residente_uid'], entrada))

    # También se inserta en el historial con la entrada (fecha_hora_salida NULL inicialmente)
    c.execute('''
        INSERT INTO historial (nombre, apellido, status, fecha_hora_entrada, fecha_hora_salida)
        VALUES (?, ?, 'visitante', ?, NULL)
    ''', (data['nombre'], data['apellidos'], entrada))

    conn.commit()
    conn.close()

    send_command_to_arduino("ABRIR_ENTRADA")
    flash('¡Entrada de visitante registrada con éxito! La barrera de entrada se ha abierto.', 'success')
    return redirect(url_for('visitante'))

# Ruta para registrar la salida del visitante por placas
@app.route('/registro_salida_visitante', methods=['POST'])
def registro_salida_visitante():
    placas = request.form['placas_salida'].strip() # Obtener las placas del formulario
    salida = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    conn = get_db()
    c = conn.cursor()

    # Buscar el visitante por placas que no tenga una fecha de salida registrada
    # Se busca la entrada más reciente para esas placas en la tabla 'visitantes'
    visitante_a_salir = conn.execute('''
        SELECT id, nombre, apellidos FROM visitantes
        WHERE placas = ? AND fecha_hora_salida IS NULL
        ORDER BY fecha_hora_entrada DESC LIMIT 1
    ''', (placas,)).fetchone()

    if visitante_a_salir:
        visitante_id = visitante_a_salir['id']
        visitante_nombre = visitante_a_salir['nombre']
        visitante_apellido = visitante_a_salir['apellidos']

        # Actualizar la hora de salida del visitante en la tabla visitantes
        c.execute('''
            UPDATE visitantes
            SET fecha_hora_salida = ?
            WHERE id = ?
        ''', (salida, visitante_id))

        # --- Lógica para actualizar HISTORIAL: Primero obtenemos el ID, luego actualizamos ---
        historial_entry_id = conn.execute('''
            SELECT id FROM historial
            WHERE nombre = ? AND apellido = ? AND status = 'visitante' AND fecha_hora_salida IS NULL
            ORDER BY fecha_hora_entrada DESC LIMIT 1
        ''', (visitante_nombre, visitante_apellido)).fetchone()

        if historial_entry_id:
            # Actualizar la entrada en la tabla 'historial' usando el ID encontrado
            c.execute('''
                UPDATE historial
                SET fecha_hora_salida = ?
                WHERE id = ?
            ''', (salida, historial_entry_id['id']))
        else:
            # Esto no debería ocurrir si se encontró un visitante, pero es un fallback
            print(f"Advertencia: No se encontró entrada en historial para {visitante_nombre} {visitante_apellido} sin salida.")
        # --- FIN LÓGICA DE HISTORIAL ---

        conn.commit()
        conn.close()

        send_command_to_arduino("ABRIR_SALIDA")
        flash(f'¡Salida de {placas} registrada con éxito! La barrera de salida se ha abierto.', 'success')
    else:
        conn.close()
        flash(f'No se encontró un registro de entrada pendiente para las placas: {placas}. Por favor, verifique el número.', 'error')

    return redirect(url_for('visitante'))

@app.route('/registro_residente', methods=['POST'])
def registro_residente():
    data = request.form
    conn = get_db()
    conn.execute('''
        INSERT INTO residentes (nombre, apellidos, direccion, modelo_carro, color_carro, placas, rfid_uid, fecha_hora_entrada, fecha_hora_salida)
        VALUES (?, ?, ?, ?, ?, ?, ?, NULL, NULL) # RFID y fechas de entrada/salida inicialmente nulas
    ''', (data['nombre'], data['apellidos'], data['direccion'], data['modelo_carro'], data['color_carro'], data['placas'], data['rfid_uid']))
    conn.commit()
    conn.close()
    flash('¡Residente registrado con éxito!', 'success')
    return redirect(url_for('admin'))

@app.route('/registro_admin', methods=['POST'])
def registro_admin():
    data = request.form
    conn = get_db()
    conn.execute('''
        INSERT INTO administradores (usuario, password, nombre)
        VALUES (?, ?, ?)
    ''', (data['usuario'], data['password'], data['nombre']))
    conn.commit()
    conn.close()
    flash('¡Administrador registrado con éxito!', 'success')
    return redirect(url_for('admin'))

@app.route('/eliminar_residente/<int:id>')
def eliminar_residente(id):
    if 'admin' not in session:
        flash('Debes iniciar sesión como administrador para realizar esta acción.', 'warning')
        return redirect(url_for('login'))
    conn = get_db()
    conn.execute('DELETE FROM residentes WHERE id = ?', (id,))
    conn.commit()
    conn.close()
    flash('Residente eliminado con éxito.', 'info')
    return redirect(url_for('admin'))

@app.route('/abrir_barrera/<string:tipo_barrera>')
def abrir_barrera(tipo_barrera):
    if 'admin' not in session:
        flash('Debes iniciar sesión como administrador para controlar las barreras.', 'warning')
        return redirect(url_for('login'))

    if tipo_barrera == 'entrada':
        send_command_to_arduino("ABRIR_ENTRADA")
        flash('Barrera de entrada abierta desde el panel de administrador.', 'info')
    elif tipo_barrera == 'salida':
        send_command_to_arduino("ABRIR_SALIDA")
        flash('Barrera de salida abierta desde el panel de administrador.', 'info')
    else:
        flash('Tipo de barrera desconocido.', 'error')

    return redirect(url_for('admin'))

@app.route('/logout')
def logout():
    session.pop('admin', None)
    flash('Sesión cerrada.', 'info')
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(debug=True)
====================================
============admin.html==============
====================================
<!DOCTYPE html>
<html>
<head>
    <title>Panel Administrador</title>
    <link rel="stylesheet" href="../static/styles.css">
</head>
<body>
    <h2>Panel de Administrador</h2>

    {% with messages = get_flashed_messages(with_categories=true) %}
      {% if messages %}
        <ul class="flashes">
        {% for category, message in messages %}
          <li class="{{ category }}">{{ message }}</li>
        {% endfor %}
        </ul>
      {% endif %}
    {% endwith %}

    <h3>Control de Barreras</h3>
    <div class="barrera-control">
        <button onclick="window.location.href='/abrir_barrera/entrada'">Abrir Barrera de Entrada</button>
        <button onclick="window.location.href='/abrir_barrera/salida'">Abrir Barrera de Salida</button>
    </div>
    <br>

    <h3>Registrar Residente</h3>
    <form action="/registro_residente" method="POST">
        <input type="text" name="nombre" placeholder="Nombre" required><br>
        <input type="text" name="apellidos" placeholder="Apellidos" required><br>
        <input type="text" name="direccion" placeholder="Dirección" required><br>
        <input type="text" name="modelo_carro" placeholder="Modelo del Carro" required><br>
        <input type="text" name="color_carro" placeholder="Color del Carro" required><br>
        <input type="text" name="placas" placeholder="Placas" required><br>
        <input type="text" name="rfid_uid" placeholder="RFID UID (no funcional aún)" value="N/A"><br>
        <button type="submit">Registrar Residente</button>
    </form>

    <h3>Registrar Administrador</h3>
    <form action="/registro_admin" method="POST">
        <input type="text" name="nombre" placeholder="Nombre" required><br>
        <input type="text" name="usuario" placeholder="Usuario" required><br>
        <input type="password" name="password" placeholder="Contraseña" required><br>
        <button type="submit">Registrar Administrador</button>
    </form>

    <h3>Residentes Registrados</h3>
    <div class="table-container">
        <table>
            <thead>
                <tr>
                    <th>Nombre</th><th>Apellidos</th><th>Dirección</th><th>Modelo</th><th>Color</th><th>Placas</th><th>RFID</th><th>Eliminar</th>
                </tr>
            </thead>
            <tbody>
                {% for r in residentes %}
                <tr>
                    <td>{{ r['nombre'] }}</td>
                    <td>{{ r['apellidos'] }}</td>
                    <td>{{ r['direccion'] }}</td>
                    <td>{{ r['modelo_carro'] }}</td>
                    <td>{{ r['color_carro'] }}</td>
                    <td>{{ r['placas'] }}</td>
                    <td>{{ r['rfid_uid'] }}</td>
                    <td><a href="/eliminar_residente/{{ r['id'] }}">❌</a></td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <h3>Historial de Entradas y Salidas</h3>
    <div class="table-container">
        <table>
            <thead>
                <tr>
                    <th>Nombre</th><th>Apellido</th><th>Status</th><th>Entrada</th><th>Salida</th>
                </tr>
            </thead>
            <tbody>
                {% for h in historial %}
                <tr>
                    <td>{{ h['nombre'] }}</td>
                    <td>{{ h['apellido'] }}</td>
                    <td>{{ h['status'] }}</td>
                    <td>{{ h['fecha_hora_entrada'] }}</td>
                    <td>{{ h['fecha_hora_salida'] or '-' }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <h3>Visitantes Registrados</h3>
    <div class="table-container">
        <table>
            <thead>
                <tr>
                    <th>Nombre</th><th>Apellidos</th><th>Teléfono</th><th>Modelo</th><th>Color</th><th>Placas</th><th>UID Residente</th><th>Entrada</th><th>Salida</th>
                </tr>
            </thead>
            <tbody>
                {% for v in visitantes %}
                <tr>
                    <td>{{ v['nombre'] }}</td>
                    <td>{{ v['apellidos'] }}</td>
                    <td>{{ v['telefono'] }}</td>
                    <td>{{ v['modelo_carro'] }}</td>
                    <td>{{ v['color_carro'] }}</td>
                    <td>{{ v['placas'] }}</td>
                    <td>{{ v['residente_uid'] }}</td>
                    <td>{{ v['fecha_hora_entrada'] }}</td>
                    <td>{{ v['fecha_hora_salida'] or '-' }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
    <br>
    <a href="/logout">Cerrar Sesión</a>
</body>
</html>

====================================
============login.html==============
====================================
<!DOCTYPE html>
<html>
<head>
    <title>Login Administrador</title>
    <link rel="stylesheet" href="../static/styles.css">
</head>
<body>
    <h2>Login Administrador</h2>
    <form action="/login_admin" method="POST">
        <input type="text" name="usuario" placeholder="Usuario" required><br>
        <input type="password" name="password" placeholder="Contraseña" required><br>
        <button type="submit">Entrar</button>
    </form>
    <br>
    <a href="/visitante">Acceder como Visitante</a>

    {% with messages = get_flashed_messages(with_categories=true) %}
      {% if messages %}
        <ul class="flashes">
        {% for category, message in messages %}
          <li class="{{ category }}">{{ message }}</li>
        {% endfor %}
        </ul>
      {% endif %}
    {% endwith %}
</body>
</html>
====================================
==========visitante.html============
====================================
<!DOCTYPE html>
<html>
<head>
    <title>Registro de Visitante</title>
    <link rel="stylesheet" href="../static/styles.css">
</head>
<body>
    <h2>Formulario de Registro - Entrada de Visitante</h2>
    <form action="/registro_visitante" method="POST">
        <input type="text" name="nombre" placeholder="Nombre" required><br>
        <input type="text" name="apellidos" placeholder="Apellidos" required><br>
        <input type="text" name="telefono" placeholder="Teléfono" required><br>
        <input type="text" name="modelo_carro" placeholder="Modelo del Carro" required><br>
        <input type="text" name="color_carro" placeholder="Color del Carro" required><br>
        <input type="text" name="placas" placeholder="Placas (Ej: ABC-123)" required><br>
        <input type="text" name="residente_uid" placeholder="Nombre/UID del Residente" required><br>
        <button type="submit">Registrar Entrada</button>
    </form>

    <hr> <h2>Registrar Salida de Visitante</h2>
    <p>Introduce las placas de tu vehículo para registrar tu salida y abrir la barrera:</p>
    <form action="/registro_salida_visitante" method="POST">
        <input type="text" name="placas_salida" placeholder="Placas del vehículo" required><br>
        <button type="submit">Registrar Salida y Abrir Barrera</button>
    </form>

    {% with messages = get_flashed_messages(with_categories=true) %}
      {% if messages %}
        <ul class="flashes">
        {% for category, message in messages %}
          <li class="{{ category }}">{{ message }}</li>
        {% endfor %}
        </ul>
      {% endif %}
    {% endwith %}

</body>
</html>
====================================
==========arduino.ino==============
====================================
#include <Wire.h> // Para la pantalla OLED
#include <Adafruit_GFX.h> // Para la pantalla OLED
#include <Adafruit_SSD1306.h> // Para la pantalla OLED
#include <Servo.h> // Para los servos

// Definiciones para la pantalla OLED
#define SCREEN_WIDTH 128 // Ancho de la pantalla OLED, en píxeles
#define SCREEN_HEIGHT 64 // Alto de la pantalla OLED, en píxeles
#define OLED_RESET -1 // Reset pin # (o -1 si está conectado al reset de Arduino)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Definiciones para los Servos
Servo servoEntrada;
Servo servoSalida;

const int PIN_SERVO_ENTRADA = 9; // Pin digital para el servo de entrada
const int PIN_SERVO_SALIDA = 10; // Pin digital para el servo de salida

// Posiciones de los servos
const int POS_CERRADO = 0;   // Ángulo para barrera cerrada
const int POS_ABIERTO = 90;  // Ángulo para barrera abierta

void setup() {
  Serial.begin(9600); // Inicia comunicación serial a 9600 baudios
  while (!Serial); // Espera a que el monitor serial se conecte (solo para placas nativas USB)

  // Iniciar pantalla OLED
  // La dirección I2C común es 0x3C para pantallas 128x64, o 0x3D para otras
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("Fallo en la asignación de SSD1306"));
    for(;;); // No continuar si falla
  }
  display.display();
  delay(2000); // Muestra el logo de Adafruit por 2 segundos
  display.clearDisplay();

  // Adjuntar servos a sus pines
  servoEntrada.attach(PIN_SERVO_ENTRADA);
  servoSalida.attach(PIN_SERVO_SALIDA);

  // Posición inicial de los servos (cerrado)
  servoEntrada.write(POS_CERRADO);
  servoSalida.write(POS_CERRADO);

  displayMessage("Sistema de", "Estacionamiento");
  delay(1000);
  displayMessage("Listo", "");
}

void loop() {
  if (Serial.available()) { // Si hay datos disponibles en el puerto serial
    String command = Serial.readStringUntil('\n'); // Lee la cadena hasta el salto de línea
    command.trim(); // Eliminar espacios en blanco y saltos de línea al final

    Serial.print("Comando recibido: ");
    Serial.println(command);

    if (command == "ABRIR_ENTRADA") {
      servoEntrada.write(POS_ABIERTO); // Abrir barrera de entrada
      displayMessage("Barrera Entrada", "ABIERTA");
      delay(3000); // Mantener abierta por 3 segundos
      servoEntrada.write(POS_CERRADO); // Cerrar barrera de entrada
      displayMessage("Barrera Entrada", "CERRADA");
    } else if (command == "ABRIR_SALIDA") {
      servoSalida.write(POS_ABIERTO); // Abrir barrera de salida
      displayMessage("Barrera Salida", "ABIERTA");
      delay(3000); // Mantener abierta por 3 segundos
      servoSalida.write(POS_CERRADO); // Cerrar barrera de salida
      displayMessage("Barrera Salida", "CERRADA");
    } else {
      displayMessage("Comando", "Desconocido");
    }
  }
}

// Función para mostrar mensajes en la pantalla OLED
void displayMessage(String line1, String line2) {
  display.clearDisplay(); // Limpia el buffer de la pantalla
  display.setTextSize(2); // Tamaño de texto 2 (más grande)
  display.setTextColor(SSD1306_WHITE); // Color del texto
  display.setCursor(0, 0); // Posición del cursor (columna, fila)
  display.println(line1); // Imprime la primera línea
  display.setTextSize(1); // Tamaño de texto 1 (más pequeño para la segunda línea)
  display.setCursor(0, 20); // Posición del cursor para la segunda línea
  display.println(line2); // Imprime la segunda línea
  display.display(); // Muestra el contenido del buffer en la pantalla
